//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity gameRoundEntity { get { return GetGroup(GameMatcher.GameRound).GetSingleEntity(); } }
    public Game.RoundComponent gameRound { get { return gameRoundEntity.gameRound; } }
    public bool hasGameRound { get { return gameRoundEntity != null; } }

    public GameEntity SetGameRound(int newCount) {
        if(hasGameRound) {
            throw new Entitas.EntitasException("Could not set GameRound!\n" + this + " already has an entity with Game.RoundComponent!",
                "You should check if the context already has a gameRoundEntity before setting it or use context.ReplaceGameRound().");
        }
        var entity = CreateEntity();
        entity.AddGameRound(newCount);
        return entity;
    }

    public void ReplaceGameRound(int newCount) {
        var entity = gameRoundEntity;
        if(entity == null) {
            entity = SetGameRound(newCount);
        } else {
            entity.ReplaceGameRound(newCount);
        }
    }

    public void RemoveGameRound() {
        DestroyEntity(gameRoundEntity);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.RoundComponent gameRound { get { return (Game.RoundComponent)GetComponent(GameComponentsLookup.GameRound); } }
    public bool hasGameRound { get { return HasComponent(GameComponentsLookup.GameRound); } }

    public void AddGameRound(int newCount) {
        var index = GameComponentsLookup.GameRound;
        var component = CreateComponent<Game.RoundComponent>(index);
        component.Count = newCount;
        AddComponent(index, component);
    }

    public void ReplaceGameRound(int newCount) {
        var index = GameComponentsLookup.GameRound;
        var component = CreateComponent<Game.RoundComponent>(index);
        component.Count = newCount;
        ReplaceComponent(index, component);
    }

    public void RemoveGameRound() {
        RemoveComponent(GameComponentsLookup.GameRound);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.MatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherGameRound;

    public static Entitas.IMatcher<GameEntity> GameRound {
        get {
            if(_matcherGameRound == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.GameRound);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherGameRound = matcher;
            }

            return _matcherGameRound;
        }
    }
}
