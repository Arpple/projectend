//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity roundLimitEntity { get { return GetGroup(GameMatcher.RoundLimit).GetSingleEntity(); } }
    public RoundLimitComponent roundLimit { get { return roundLimitEntity.roundLimit; } }
    public bool hasRoundLimit { get { return roundLimitEntity != null; } }

    public GameEntity SetRoundLimit(int newCount) {
        if(hasRoundLimit) {
            throw new Entitas.EntitasException("Could not set RoundLimit!\n" + this + " already has an entity with RoundLimitComponent!",
                "You should check if the context already has a roundLimitEntity before setting it or use context.ReplaceRoundLimit().");
        }
        var entity = CreateEntity();
        entity.AddRoundLimit(newCount);
        return entity;
    }

    public void ReplaceRoundLimit(int newCount) {
        var entity = roundLimitEntity;
        if(entity == null) {
            entity = SetRoundLimit(newCount);
        } else {
            entity.ReplaceRoundLimit(newCount);
        }
    }

    public void RemoveRoundLimit() {
        DestroyEntity(roundLimitEntity);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public RoundLimitComponent roundLimit { get { return (RoundLimitComponent)GetComponent(GameComponentsLookup.RoundLimit); } }
    public bool hasRoundLimit { get { return HasComponent(GameComponentsLookup.RoundLimit); } }

    public void AddRoundLimit(int newCount) {
        var index = GameComponentsLookup.RoundLimit;
        var component = CreateComponent<RoundLimitComponent>(index);
        component.Count = newCount;
        AddComponent(index, component);
    }

    public void ReplaceRoundLimit(int newCount) {
        var index = GameComponentsLookup.RoundLimit;
        var component = CreateComponent<RoundLimitComponent>(index);
        component.Count = newCount;
        ReplaceComponent(index, component);
    }

    public void RemoveRoundLimit() {
        RemoveComponent(GameComponentsLookup.RoundLimit);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRoundLimit;

    public static Entitas.IMatcher<GameEntity> RoundLimit {
        get {
            if(_matcherRoundLimit == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.RoundLimit);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRoundLimit = matcher;
            }

            return _matcherRoundLimit;
        }
    }
}
