//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity roundEntity { get { return GetGroup(GameMatcher.Round).GetSingleEntity(); } }
    public RoundComponent round { get { return roundEntity.round; } }
    public bool hasRound { get { return roundEntity != null; } }

    public GameEntity SetRound(int newCount) {
        if(hasRound) {
            throw new Entitas.EntitasException("Could not set Round!\n" + this + " already has an entity with RoundComponent!",
                "You should check if the context already has a roundEntity before setting it or use context.ReplaceRound().");
        }
        var entity = CreateEntity();
        entity.AddRound(newCount);
        return entity;
    }

    public void ReplaceRound(int newCount) {
        var entity = roundEntity;
        if(entity == null) {
            entity = SetRound(newCount);
        } else {
            entity.ReplaceRound(newCount);
        }
    }

    public void RemoveRound() {
        DestroyEntity(roundEntity);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public RoundComponent round { get { return (RoundComponent)GetComponent(GameComponentsLookup.Round); } }
    public bool hasRound { get { return HasComponent(GameComponentsLookup.Round); } }

    public void AddRound(int newCount) {
        var index = GameComponentsLookup.Round;
        var component = CreateComponent<RoundComponent>(index);
        component.Count = newCount;
        AddComponent(index, component);
    }

    public void ReplaceRound(int newCount) {
        var index = GameComponentsLookup.Round;
        var component = CreateComponent<RoundComponent>(index);
        component.Count = newCount;
        ReplaceComponent(index, component);
    }

    public void RemoveRound() {
        RemoveComponent(GameComponentsLookup.Round);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRound;

    public static Entitas.IMatcher<GameEntity> Round {
        get {
            if(_matcherRound == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Round);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRound = matcher;
            }

            return _matcherRound;
        }
    }
}
