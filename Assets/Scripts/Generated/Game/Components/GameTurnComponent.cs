//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity turnEntity { get { return GetGroup(GameMatcher.Turn).GetSingleEntity(); } }
    public TurnComponent turn { get { return turnEntity.turn; } }
    public bool hasTurn { get { return turnEntity != null; } }

    public GameEntity SetTurn(int newCount) {
        if(hasTurn) {
            throw new Entitas.EntitasException("Could not set Turn!\n" + this + " already has an entity with TurnComponent!",
                "You should check if the context already has a turnEntity before setting it or use context.ReplaceTurn().");
        }
        var entity = CreateEntity();
        entity.AddTurn(newCount);
        return entity;
    }

    public void ReplaceTurn(int newCount) {
        var entity = turnEntity;
        if(entity == null) {
            entity = SetTurn(newCount);
        } else {
            entity.ReplaceTurn(newCount);
        }
    }

    public void RemoveTurn() {
        DestroyEntity(turnEntity);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public TurnComponent turn { get { return (TurnComponent)GetComponent(GameComponentsLookup.Turn); } }
    public bool hasTurn { get { return HasComponent(GameComponentsLookup.Turn); } }

    public void AddTurn(int newCount) {
        var index = GameComponentsLookup.Turn;
        var component = CreateComponent<TurnComponent>(index);
        component.Count = newCount;
        AddComponent(index, component);
    }

    public void ReplaceTurn(int newCount) {
        var index = GameComponentsLookup.Turn;
        var component = CreateComponent<TurnComponent>(index);
        component.Count = newCount;
        ReplaceComponent(index, component);
    }

    public void RemoveTurn() {
        RemoveComponent(GameComponentsLookup.Turn);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTurn;

    public static Entitas.IMatcher<GameEntity> Turn {
        get {
            if(_matcherTurn == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Turn);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTurn = matcher;
            }

            return _matcherTurn;
        }
    }
}
