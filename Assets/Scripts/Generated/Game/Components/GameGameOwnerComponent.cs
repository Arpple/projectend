//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.OwnerComponent gameOwner { get { return (Game.OwnerComponent)GetComponent(GameComponentsLookup.GameOwner); } }
    public bool hasGameOwner { get { return HasComponent(GameComponentsLookup.GameOwner); } }

    public void AddGameOwner(GameEntity newEntity) {
        var index = GameComponentsLookup.GameOwner;
        var component = CreateComponent<Game.OwnerComponent>(index);
        component.Entity = newEntity;
        AddComponent(index, component);
    }

    public void ReplaceGameOwner(GameEntity newEntity) {
        var index = GameComponentsLookup.GameOwner;
        var component = CreateComponent<Game.OwnerComponent>(index);
        component.Entity = newEntity;
        ReplaceComponent(index, component);
    }

    public void RemoveGameOwner() {
        RemoveComponent(GameComponentsLookup.GameOwner);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherGameOwner;

    public static Entitas.IMatcher<GameEntity> GameOwner {
        get {
            if(_matcherGameOwner == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.GameOwner);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherGameOwner = matcher;
            }

            return _matcherGameOwner;
        }
    }
}
