//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity gameTurnEntity { get { return GetGroup(GameMatcher.GameTurn).GetSingleEntity(); } }
    public Game.TurnComponent gameTurn { get { return gameTurnEntity.gameTurn; } }
    public bool hasGameTurn { get { return gameTurnEntity != null; } }

    public GameEntity SetGameTurn(int newCount) {
        if(hasGameTurn) {
            throw new Entitas.EntitasException("Could not set GameTurn!\n" + this + " already has an entity with Game.TurnComponent!",
                "You should check if the context already has a gameTurnEntity before setting it or use context.ReplaceGameTurn().");
        }
        var entity = CreateEntity();
        entity.AddGameTurn(newCount);
        return entity;
    }

    public void ReplaceGameTurn(int newCount) {
        var entity = gameTurnEntity;
        if(entity == null) {
            entity = SetGameTurn(newCount);
        } else {
            entity.ReplaceGameTurn(newCount);
        }
    }

    public void RemoveGameTurn() {
        DestroyEntity(gameTurnEntity);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Game.TurnComponent gameTurn { get { return (Game.TurnComponent)GetComponent(GameComponentsLookup.GameTurn); } }
    public bool hasGameTurn { get { return HasComponent(GameComponentsLookup.GameTurn); } }

    public void AddGameTurn(int newCount) {
        var index = GameComponentsLookup.GameTurn;
        var component = CreateComponent<Game.TurnComponent>(index);
        component.Count = newCount;
        AddComponent(index, component);
    }

    public void ReplaceGameTurn(int newCount) {
        var index = GameComponentsLookup.GameTurn;
        var component = CreateComponent<Game.TurnComponent>(index);
        component.Count = newCount;
        ReplaceComponent(index, component);
    }

    public void RemoveGameTurn() {
        RemoveComponent(GameComponentsLookup.GameTurn);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherGameTurn;

    public static Entitas.IMatcher<GameEntity> GameTurn {
        get {
            if(_matcherGameTurn == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.GameTurn);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherGameTurn = matcher;
            }

            return _matcherGameTurn;
        }
    }
}
