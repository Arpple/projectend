//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity playingOrderEntity { get { return GetGroup(GameMatcher.PlayingOrder).GetSingleEntity(); } }
    public PlayingOrderComponent playingOrder { get { return playingOrderEntity.playingOrder; } }
    public bool hasPlayingOrder { get { return playingOrderEntity != null; } }

    public GameEntity SetPlayingOrder(System.Collections.Generic.List<GameEntity> newPlayerOrder) {
        if(hasPlayingOrder) {
            throw new Entitas.EntitasException("Could not set PlayingOrder!\n" + this + " already has an entity with PlayingOrderComponent!",
                "You should check if the context already has a playingOrderEntity before setting it or use context.ReplacePlayingOrder().");
        }
        var entity = CreateEntity();
        entity.AddPlayingOrder(newPlayerOrder);
        return entity;
    }

    public void ReplacePlayingOrder(System.Collections.Generic.List<GameEntity> newPlayerOrder) {
        var entity = playingOrderEntity;
        if(entity == null) {
            entity = SetPlayingOrder(newPlayerOrder);
        } else {
            entity.ReplacePlayingOrder(newPlayerOrder);
        }
    }

    public void RemovePlayingOrder() {
        DestroyEntity(playingOrderEntity);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public PlayingOrderComponent playingOrder { get { return (PlayingOrderComponent)GetComponent(GameComponentsLookup.PlayingOrder); } }
    public bool hasPlayingOrder { get { return HasComponent(GameComponentsLookup.PlayingOrder); } }

    public void AddPlayingOrder(System.Collections.Generic.List<GameEntity> newPlayerOrder) {
        var index = GameComponentsLookup.PlayingOrder;
        var component = CreateComponent<PlayingOrderComponent>(index);
        component.PlayerOrder = newPlayerOrder;
        AddComponent(index, component);
    }

    public void ReplacePlayingOrder(System.Collections.Generic.List<GameEntity> newPlayerOrder) {
        var index = GameComponentsLookup.PlayingOrder;
        var component = CreateComponent<PlayingOrderComponent>(index);
        component.PlayerOrder = newPlayerOrder;
        ReplaceComponent(index, component);
    }

    public void RemovePlayingOrder() {
        RemoveComponent(GameComponentsLookup.PlayingOrder);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPlayingOrder;

    public static Entitas.IMatcher<GameEntity> PlayingOrder {
        get {
            if(_matcherPlayingOrder == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PlayingOrder);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPlayingOrder = matcher;
            }

            return _matcherPlayingOrder;
        }
    }
}
