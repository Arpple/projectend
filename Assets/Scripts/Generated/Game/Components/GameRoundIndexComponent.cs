//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity roundIndexEntity { get { return GetGroup(GameMatcher.RoundIndex).GetSingleEntity(); } }
    public RoundIndexComponent roundIndex { get { return roundIndexEntity.roundIndex; } }
    public bool hasRoundIndex { get { return roundIndexEntity != null; } }

    public GameEntity SetRoundIndex(int newIndex) {
        if(hasRoundIndex) {
            throw new Entitas.EntitasException("Could not set RoundIndex!\n" + this + " already has an entity with RoundIndexComponent!",
                "You should check if the context already has a roundIndexEntity before setting it or use context.ReplaceRoundIndex().");
        }
        var entity = CreateEntity();
        entity.AddRoundIndex(newIndex);
        return entity;
    }

    public void ReplaceRoundIndex(int newIndex) {
        var entity = roundIndexEntity;
        if(entity == null) {
            entity = SetRoundIndex(newIndex);
        } else {
            entity.ReplaceRoundIndex(newIndex);
        }
    }

    public void RemoveRoundIndex() {
        DestroyEntity(roundIndexEntity);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public RoundIndexComponent roundIndex { get { return (RoundIndexComponent)GetComponent(GameComponentsLookup.RoundIndex); } }
    public bool hasRoundIndex { get { return HasComponent(GameComponentsLookup.RoundIndex); } }

    public void AddRoundIndex(int newIndex) {
        var index = GameComponentsLookup.RoundIndex;
        var component = CreateComponent<RoundIndexComponent>(index);
        component.Index = newIndex;
        AddComponent(index, component);
    }

    public void ReplaceRoundIndex(int newIndex) {
        var index = GameComponentsLookup.RoundIndex;
        var component = CreateComponent<RoundIndexComponent>(index);
        component.Index = newIndex;
        ReplaceComponent(index, component);
    }

    public void RemoveRoundIndex() {
        RemoveComponent(GameComponentsLookup.RoundIndex);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRoundIndex;

    public static Entitas.IMatcher<GameEntity> RoundIndex {
        get {
            if(_matcherRoundIndex == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.RoundIndex);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRoundIndex = matcher;
            }

            return _matcherRoundIndex;
        }
    }
}
